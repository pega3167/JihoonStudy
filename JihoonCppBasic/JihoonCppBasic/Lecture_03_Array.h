#pragma once

#pragma once

class Lecture03
{
	void Array()
	{
		// 배열 (자료형) (변수명)([갯수])
		// ex int arr[300];

		// 한번에 여러개의 데이터를 stack에 할당받고 싶을 때 사용한다.
		// stack 공간에 "차례대로" 연결되어서 할당된다.
		// (중요)	선언 시에 할당한 주소 공간의 가장 앞 주소를 변수명에 저장한다.
		//			즉 변수명은 포인터다.
		{
			int arr1[5];
			int arr2[5] = { 0, 1, 2, 3, 4 };
			int arr3[5] = { 0, }; //다 0으로 채워넣음
			// 여기서 arr1 arr2 arr3은 모두 int*임
		}

		// 차례대로 연결되어 있기 때문에 가장 앞 주소만 알아도 모든 공간에 접근 가능하다. 
		// ex) 300번째 데이터는 첫 주소로부터 (자료형 크기 x 300)만큼 떨어진 공간에 저장되어 있다.

		// 첫 주소로부터 n개의 자료형만큼 떨어진 데이터를 읽는 연산자가 [n]이다. (선언시에 쓰는 []와 다름)
		{
			int arr[3];		// stack 공간에 연속된 int 3개를 받음
							// arr라는 int* 공간 1개를 받음
							// arr안에는 자동으로 받은 int 3개의 맨 앞 주소값이 저장됨

			arr[0] = 2;		// arr안에 저장된 주소값에서 int x 0만큼 떨어진 공간에 2를 저장해라.

			
			//arr는 사실 포인터이기 때문에, [n]은 사실 포인터 연산이나 다름없다.
			int* p = arr;
			p[0] = 2;		// p안에 저장된 주소값에서 int x 0만큼 떨어진 공간에 2를 저장해라
		}
	}
};